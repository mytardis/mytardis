{
	"info": {
		"_postman_id": "ec87000d-1d59-4da7-879d-a0410381a762",
		"name": "Datasets",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var res = pm.response.json()\r",
							"console.log(res)\r",
							"pm.test(\"response contains token\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"pm.collectionVariables.set('token', res.data.userSignIn.token)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  userSignIn(input: {\r\n    username: \"admin\",\r\n    password: \"admin\"\r\n  }) {\r\n    token\r\n    user {\r\n      firstName\r\n      lastName\r\n      email\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Experiments",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//add header\r",
							"pm.request.headers.add({\r",
							"  key: \"Authorization\",\r",
							"    value: \"JWT \" +\r",
							"        pm.collectionVariables.get(\"token\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than limit\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"})\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equals(200);\r",
							"});\r",
							"console.log(pm.response.json())\r",
							"pm.test(\"contains id\", function() {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"})\r",
							"const res = pm.response.json()\r",
							"console.log(res.data.createExperiment.experiment)\r",
							"// set id as collection variable\r",
							"pm.collectionVariables.set(\"exp_id\", res.data.createExperiment.experiment.pk);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "JWT",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  createExperiment(input: {\r\n\ttitle: \"Test Create Dataset\",\r\n    institutionName: \"Test_ins\",\r\n    description: \"desc\"\r\n  }) {\r\n    experiment{\r\n      id\r\n      title\r\n      pk\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Datasets",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//add header\r",
							"pm.request.headers.add({\r",
							"  key: \"Authorization\",\r",
							"    value: \"JWT \" +\r",
							"        pm.collectionVariables.get(\"token\")\r",
							"});\r",
							"const arr = new Array(100)\r",
							"// Get the length of the array\r",
							"var idArrayLength = arr.length;\r",
							"\r",
							"// Store the array length in the environment\r",
							"pm.environment.set('idArrayLength',idArrayLength);\r",
							"if(!pm.environment.has('counter'))\r",
							"{\r",
							"    pm.environment.set('counter',0);\r",
							"}\r",
							"\r",
							"//get the counter value\r",
							"var counter = pm.environment.get('counter');\r",
							"\r",
							"\r",
							"//get the value of the idArray at the current iteration (counter)\r",
							"//var exp = expArray[counter];\r",
							"pm.environment.set('dataset_description',`test_dataset_${counter}`);\r",
							"\r",
							"//incremement the counter, and store it in the environment\r",
							"counter++;\r",
							"pm.environment.set('counter',counter);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than limit\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"})\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equals(200);\r",
							"});\r",
							"console.log(pm.response.json())\r",
							"pm.test(\"contains id\", function() {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"})\r",
							"//get the counter value and array length\r",
							"var counter = pm.environment.get('counter');\r",
							"var arrayLength = pm.environment.get(\"idArrayLength\");\r",
							"\r",
							"//check to see if there are more indexes in the array to go through, and if so \r",
							"if (counter < arrayLength)\r",
							"{\r",
							"    postman.setNextRequest('Create Datasets');\r",
							"    // NOTE: since this the only request being looped, you can use also: pm.info.requestName in place of the literal request name. This allows the request name to be changed without a code update.\r",
							"    // Example:\r",
							"    // postman.setNextRequest(pm.info.requestName);\r",
							"}\r",
							"else\r",
							"{\r",
							"    postman.setNextRequest('Get Dataset');\r",
							"    //unset variable\r",
							"    pm.environment.unset('counter');\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "JWT",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  createDataset(input: {\r\n    immutable: true,\r\n    experiments:  {{exp_id}}\r\n    description: \"{{dataset_description}}\"\r\n  }) {\r\n    dataset{\r\n      id\r\n      pk\r\n      description\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Dataset",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//add header\r",
							"pm.request.headers.add({\r",
							"  key: \"Authorization\",\r",
							"    value: \"JWT \" +\r",
							"        pm.collectionVariables.get(\"token\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test dataset count\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData.data.experiments)\r",
							"    pm.expect(jsonData.data.experiments.edges[0].node.datasets.edges.length).to.equal(100);\r",
							"});\r",
							"pm.test(\"contains dataset description\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"test_dataset\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query{\r\n  experiments(title_Contains: \"Test Create Dataset\"){\r\n    edges{\r\n      node{\r\n        id\r\n        title\r\n        pk\r\n        datasets{\r\n          edges{\r\n            node{\r\n              id\r\n              description\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": " http://127.0.0.1:8000/graphql/ "
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "exp_id",
			"value": ""
		}
	]
}